/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg [15:0] a;
  
  reg [15:0] b;
  
  reg [5:0] alufn;
  
  reg z;
  
  reg v;
  
  reg n;
  
  wire [16-1:0] M_shifter_out;
  reg [16-1:0] M_shifter_a;
  reg [16-1:0] M_shifter_b;
  reg [6-1:0] M_shifter_alufn;
  shifter_1 shifter (
    .a(M_shifter_a),
    .b(M_shifter_b),
    .alufn(M_shifter_alufn),
    .out(M_shifter_out)
  );
  
  wire [16-1:0] M_boolean_out;
  reg [16-1:0] M_boolean_a;
  reg [16-1:0] M_boolean_b;
  reg [6-1:0] M_boolean_alufn;
  boolean_2 boolean (
    .a(M_boolean_a),
    .b(M_boolean_b),
    .alufn(M_boolean_alufn),
    .out(M_boolean_out)
  );
  
  wire [16-1:0] M_adder_out;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [16-1:0] M_adder_a;
  reg [16-1:0] M_adder_b;
  reg [6-1:0] M_adder_alufn;
  adder_3 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .alufn(M_adder_alufn),
    .out(M_adder_out),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [16-1:0] M_compare_out;
  reg [1-1:0] M_compare_z;
  reg [1-1:0] M_compare_v;
  reg [1-1:0] M_compare_n;
  reg [6-1:0] M_compare_alufn;
  compare_4 compare (
    .z(M_compare_z),
    .v(M_compare_v),
    .n(M_compare_n),
    .alufn(M_compare_alufn),
    .out(M_compare_out)
  );
  
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  wire [16-1:0] M_alu_out;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_5 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n),
    .out(M_alu_out)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_6 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [8-1:0] M_multi_seven_seg_io_seg;
  wire [4-1:0] M_multi_seven_seg_io_sel;
  reg [32-1:0] M_multi_seven_seg_word;
  multi_seven_seg_7 multi_seven_seg (
    .clk(clk),
    .rst(rst),
    .word(M_multi_seven_seg_word),
    .io_seg(M_multi_seven_seg_io_seg),
    .io_sel(M_multi_seven_seg_io_sel)
  );
  wire [16-1:0] M_adder_basic_pass_test_a;
  wire [16-1:0] M_adder_basic_pass_test_b;
  wire [6-1:0] M_adder_basic_pass_test_alufn;
  wire [2-1:0] M_adder_basic_pass_state;
  wire [32-1:0] M_adder_basic_pass_status;
  reg [1-1:0] M_adder_basic_pass_start;
  reg [16-1:0] M_adder_basic_pass_test_c;
  basic_tester_8 adder_basic_pass (
    .clk(clk),
    .rst(rst),
    .start(M_adder_basic_pass_start),
    .test_c(M_adder_basic_pass_test_c),
    .test_a(M_adder_basic_pass_test_a),
    .test_b(M_adder_basic_pass_test_b),
    .test_alufn(M_adder_basic_pass_test_alufn),
    .state(M_adder_basic_pass_state),
    .status(M_adder_basic_pass_status)
  );
  wire [16-1:0] M_adder_basic_fail_test_a;
  wire [16-1:0] M_adder_basic_fail_test_b;
  wire [6-1:0] M_adder_basic_fail_test_alufn;
  wire [2-1:0] M_adder_basic_fail_state;
  wire [32-1:0] M_adder_basic_fail_status;
  reg [1-1:0] M_adder_basic_fail_start;
  reg [16-1:0] M_adder_basic_fail_test_c;
  basic_tester_9 adder_basic_fail (
    .clk(clk),
    .rst(rst),
    .start(M_adder_basic_fail_start),
    .test_c(M_adder_basic_fail_test_c),
    .test_a(M_adder_basic_fail_test_a),
    .test_b(M_adder_basic_fail_test_b),
    .test_alufn(M_adder_basic_fail_test_alufn),
    .state(M_adder_basic_fail_state),
    .status(M_adder_basic_fail_status)
  );
  wire [16-1:0] M_adder_fail_test_a;
  wire [16-1:0] M_adder_fail_test_b;
  wire [6-1:0] M_adder_fail_test_alufn;
  wire [3-1:0] M_adder_fail_state;
  wire [32-1:0] M_adder_fail_status;
  reg [1-1:0] M_adder_fail_start;
  reg [16-1:0] M_adder_fail_test_c;
  reg [1-1:0] M_adder_fail_test_z;
  reg [1-1:0] M_adder_fail_test_v;
  reg [1-1:0] M_adder_fail_test_n;
  tester_10 adder_fail (
    .clk(clk),
    .rst(rst),
    .start(M_adder_fail_start),
    .test_c(M_adder_fail_test_c),
    .test_z(M_adder_fail_test_z),
    .test_v(M_adder_fail_test_v),
    .test_n(M_adder_fail_test_n),
    .test_a(M_adder_fail_test_a),
    .test_b(M_adder_fail_test_b),
    .test_alufn(M_adder_fail_test_alufn),
    .state(M_adder_fail_state),
    .status(M_adder_fail_status)
  );
  wire [16-1:0] M_compare_basic_pass_test_a;
  wire [16-1:0] M_compare_basic_pass_test_b;
  wire [6-1:0] M_compare_basic_pass_test_alufn;
  wire [2-1:0] M_compare_basic_pass_state;
  wire [32-1:0] M_compare_basic_pass_status;
  reg [1-1:0] M_compare_basic_pass_start;
  reg [16-1:0] M_compare_basic_pass_test_c;
  basic_tester_11 compare_basic_pass (
    .clk(clk),
    .rst(rst),
    .start(M_compare_basic_pass_start),
    .test_c(M_compare_basic_pass_test_c),
    .test_a(M_compare_basic_pass_test_a),
    .test_b(M_compare_basic_pass_test_b),
    .test_alufn(M_compare_basic_pass_test_alufn),
    .state(M_compare_basic_pass_state),
    .status(M_compare_basic_pass_status)
  );
  wire [16-1:0] M_compare_basic_fail_test_a;
  wire [16-1:0] M_compare_basic_fail_test_b;
  wire [6-1:0] M_compare_basic_fail_test_alufn;
  wire [2-1:0] M_compare_basic_fail_state;
  wire [32-1:0] M_compare_basic_fail_status;
  reg [1-1:0] M_compare_basic_fail_start;
  reg [16-1:0] M_compare_basic_fail_test_c;
  basic_tester_12 compare_basic_fail (
    .clk(clk),
    .rst(rst),
    .start(M_compare_basic_fail_start),
    .test_c(M_compare_basic_fail_test_c),
    .test_a(M_compare_basic_fail_test_a),
    .test_b(M_compare_basic_fail_test_b),
    .test_alufn(M_compare_basic_fail_test_alufn),
    .state(M_compare_basic_fail_state),
    .status(M_compare_basic_fail_status)
  );
  wire [16-1:0] M_compare_fail_test_a;
  wire [16-1:0] M_compare_fail_test_b;
  wire [6-1:0] M_compare_fail_test_alufn;
  wire [3-1:0] M_compare_fail_state;
  wire [32-1:0] M_compare_fail_status;
  reg [1-1:0] M_compare_fail_start;
  reg [16-1:0] M_compare_fail_test_c;
  reg [1-1:0] M_compare_fail_test_z;
  reg [1-1:0] M_compare_fail_test_v;
  reg [1-1:0] M_compare_fail_test_n;
  tester_13 compare_fail (
    .clk(clk),
    .rst(rst),
    .start(M_compare_fail_start),
    .test_c(M_compare_fail_test_c),
    .test_z(M_compare_fail_test_z),
    .test_v(M_compare_fail_test_v),
    .test_n(M_compare_fail_test_n),
    .test_a(M_compare_fail_test_a),
    .test_b(M_compare_fail_test_b),
    .test_alufn(M_compare_fail_test_alufn),
    .state(M_compare_fail_state),
    .status(M_compare_fail_status)
  );
  wire [16-1:0] M_boolean_basic_pass_test_a;
  wire [16-1:0] M_boolean_basic_pass_test_b;
  wire [6-1:0] M_boolean_basic_pass_test_alufn;
  wire [2-1:0] M_boolean_basic_pass_state;
  wire [32-1:0] M_boolean_basic_pass_status;
  reg [1-1:0] M_boolean_basic_pass_start;
  reg [16-1:0] M_boolean_basic_pass_test_c;
  basic_tester_14 boolean_basic_pass (
    .clk(clk),
    .rst(rst),
    .start(M_boolean_basic_pass_start),
    .test_c(M_boolean_basic_pass_test_c),
    .test_a(M_boolean_basic_pass_test_a),
    .test_b(M_boolean_basic_pass_test_b),
    .test_alufn(M_boolean_basic_pass_test_alufn),
    .state(M_boolean_basic_pass_state),
    .status(M_boolean_basic_pass_status)
  );
  wire [16-1:0] M_boolean_basic_fail_test_a;
  wire [16-1:0] M_boolean_basic_fail_test_b;
  wire [6-1:0] M_boolean_basic_fail_test_alufn;
  wire [2-1:0] M_boolean_basic_fail_state;
  wire [32-1:0] M_boolean_basic_fail_status;
  reg [1-1:0] M_boolean_basic_fail_start;
  reg [16-1:0] M_boolean_basic_fail_test_c;
  basic_tester_15 boolean_basic_fail (
    .clk(clk),
    .rst(rst),
    .start(M_boolean_basic_fail_start),
    .test_c(M_boolean_basic_fail_test_c),
    .test_a(M_boolean_basic_fail_test_a),
    .test_b(M_boolean_basic_fail_test_b),
    .test_alufn(M_boolean_basic_fail_test_alufn),
    .state(M_boolean_basic_fail_state),
    .status(M_boolean_basic_fail_status)
  );
  wire [16-1:0] M_boolean_fail_test_a;
  wire [16-1:0] M_boolean_fail_test_b;
  wire [6-1:0] M_boolean_fail_test_alufn;
  wire [3-1:0] M_boolean_fail_state;
  wire [32-1:0] M_boolean_fail_status;
  reg [1-1:0] M_boolean_fail_start;
  reg [16-1:0] M_boolean_fail_test_c;
  reg [1-1:0] M_boolean_fail_test_z;
  reg [1-1:0] M_boolean_fail_test_v;
  reg [1-1:0] M_boolean_fail_test_n;
  tester_16 boolean_fail (
    .clk(clk),
    .rst(rst),
    .start(M_boolean_fail_start),
    .test_c(M_boolean_fail_test_c),
    .test_z(M_boolean_fail_test_z),
    .test_v(M_boolean_fail_test_v),
    .test_n(M_boolean_fail_test_n),
    .test_a(M_boolean_fail_test_a),
    .test_b(M_boolean_fail_test_b),
    .test_alufn(M_boolean_fail_test_alufn),
    .state(M_boolean_fail_state),
    .status(M_boolean_fail_status)
  );
  wire [16-1:0] M_shifter_basic_pass_test_a;
  wire [16-1:0] M_shifter_basic_pass_test_b;
  wire [6-1:0] M_shifter_basic_pass_test_alufn;
  wire [2-1:0] M_shifter_basic_pass_state;
  wire [32-1:0] M_shifter_basic_pass_status;
  reg [1-1:0] M_shifter_basic_pass_start;
  reg [16-1:0] M_shifter_basic_pass_test_c;
  basic_tester_17 shifter_basic_pass (
    .clk(clk),
    .rst(rst),
    .start(M_shifter_basic_pass_start),
    .test_c(M_shifter_basic_pass_test_c),
    .test_a(M_shifter_basic_pass_test_a),
    .test_b(M_shifter_basic_pass_test_b),
    .test_alufn(M_shifter_basic_pass_test_alufn),
    .state(M_shifter_basic_pass_state),
    .status(M_shifter_basic_pass_status)
  );
  wire [16-1:0] M_shifter_basic_fail_test_a;
  wire [16-1:0] M_shifter_basic_fail_test_b;
  wire [6-1:0] M_shifter_basic_fail_test_alufn;
  wire [2-1:0] M_shifter_basic_fail_state;
  wire [32-1:0] M_shifter_basic_fail_status;
  reg [1-1:0] M_shifter_basic_fail_start;
  reg [16-1:0] M_shifter_basic_fail_test_c;
  basic_tester_18 shifter_basic_fail (
    .clk(clk),
    .rst(rst),
    .start(M_shifter_basic_fail_start),
    .test_c(M_shifter_basic_fail_test_c),
    .test_a(M_shifter_basic_fail_test_a),
    .test_b(M_shifter_basic_fail_test_b),
    .test_alufn(M_shifter_basic_fail_test_alufn),
    .state(M_shifter_basic_fail_state),
    .status(M_shifter_basic_fail_status)
  );
  wire [16-1:0] M_shifter_fail_test_a;
  wire [16-1:0] M_shifter_fail_test_b;
  wire [6-1:0] M_shifter_fail_test_alufn;
  wire [3-1:0] M_shifter_fail_state;
  wire [32-1:0] M_shifter_fail_status;
  reg [1-1:0] M_shifter_fail_start;
  reg [16-1:0] M_shifter_fail_test_c;
  reg [1-1:0] M_shifter_fail_test_z;
  reg [1-1:0] M_shifter_fail_test_v;
  reg [1-1:0] M_shifter_fail_test_n;
  tester_19 shifter_fail (
    .clk(clk),
    .rst(rst),
    .start(M_shifter_fail_start),
    .test_c(M_shifter_fail_test_c),
    .test_z(M_shifter_fail_test_z),
    .test_v(M_shifter_fail_test_v),
    .test_n(M_shifter_fail_test_n),
    .test_a(M_shifter_fail_test_a),
    .test_b(M_shifter_fail_test_b),
    .test_alufn(M_shifter_fail_test_alufn),
    .state(M_shifter_fail_state),
    .status(M_shifter_fail_status)
  );
  wire [16-1:0] M_alu_basic_pass_test_a;
  wire [16-1:0] M_alu_basic_pass_test_b;
  wire [6-1:0] M_alu_basic_pass_test_alufn;
  wire [2-1:0] M_alu_basic_pass_state;
  wire [32-1:0] M_alu_basic_pass_status;
  reg [1-1:0] M_alu_basic_pass_start;
  reg [16-1:0] M_alu_basic_pass_test_c;
  basic_tester_20 alu_basic_pass (
    .clk(clk),
    .rst(rst),
    .start(M_alu_basic_pass_start),
    .test_c(M_alu_basic_pass_test_c),
    .test_a(M_alu_basic_pass_test_a),
    .test_b(M_alu_basic_pass_test_b),
    .test_alufn(M_alu_basic_pass_test_alufn),
    .state(M_alu_basic_pass_state),
    .status(M_alu_basic_pass_status)
  );
  wire [16-1:0] M_alu_basic_fail_test_a;
  wire [16-1:0] M_alu_basic_fail_test_b;
  wire [6-1:0] M_alu_basic_fail_test_alufn;
  wire [2-1:0] M_alu_basic_fail_state;
  wire [32-1:0] M_alu_basic_fail_status;
  reg [1-1:0] M_alu_basic_fail_start;
  reg [16-1:0] M_alu_basic_fail_test_c;
  basic_tester_21 alu_basic_fail (
    .clk(clk),
    .rst(rst),
    .start(M_alu_basic_fail_start),
    .test_c(M_alu_basic_fail_test_c),
    .test_a(M_alu_basic_fail_test_a),
    .test_b(M_alu_basic_fail_test_b),
    .test_alufn(M_alu_basic_fail_test_alufn),
    .state(M_alu_basic_fail_state),
    .status(M_alu_basic_fail_status)
  );
  wire [16-1:0] M_alu_fail_test_a;
  wire [16-1:0] M_alu_fail_test_b;
  wire [6-1:0] M_alu_fail_test_alufn;
  wire [3-1:0] M_alu_fail_state;
  wire [32-1:0] M_alu_fail_status;
  reg [1-1:0] M_alu_fail_start;
  reg [16-1:0] M_alu_fail_test_c;
  reg [1-1:0] M_alu_fail_test_z;
  reg [1-1:0] M_alu_fail_test_v;
  reg [1-1:0] M_alu_fail_test_n;
  tester_22 alu_fail (
    .clk(clk),
    .rst(rst),
    .start(M_alu_fail_start),
    .test_c(M_alu_fail_test_c),
    .test_z(M_alu_fail_test_z),
    .test_v(M_alu_fail_test_v),
    .test_n(M_alu_fail_test_n),
    .test_a(M_alu_fail_test_a),
    .test_b(M_alu_fail_test_b),
    .test_alufn(M_alu_fail_test_alufn),
    .state(M_alu_fail_state),
    .status(M_alu_fail_status)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = M_multi_seven_seg_io_seg;
    io_sel = M_multi_seven_seg_io_sel;
    z = 1'h0;
    v = 1'h0;
    n = 1'h0;
    M_adder_basic_pass_start = 1'h0;
    M_adder_basic_fail_start = 1'h0;
    M_adder_fail_start = 1'h0;
    M_adder_basic_pass_test_c = 1'h0;
    M_adder_basic_fail_test_c = 1'h0;
    M_adder_fail_test_c = 1'h0;
    if (io_dip[0+0+0-:1]) begin
      io_led[8+15-:16] = {M_adder_out[8+7-:8], M_adder_out[0+7-:8]};
      z = M_adder_z;
      v = M_adder_v;
      n = M_adder_n;
      if (io_dip[0+6+1-:2] == 2'h0) begin
        a = M_adder_basic_pass_test_a;
        b = M_adder_basic_pass_test_b;
        alufn = M_adder_basic_pass_test_alufn;
        io_led[0+0+1-:2] = M_adder_basic_pass_state;
        M_multi_seven_seg_word = M_adder_basic_pass_status;
        M_adder_basic_pass_start = io_dip[0+0+0-:1];
        M_adder_basic_pass_test_c = M_adder_out;
      end else begin
        if (io_dip[0+6+0-:1] == 1'h1) begin
          a = M_adder_fail_test_a;
          b = M_adder_fail_test_b;
          alufn = M_adder_fail_test_alufn;
          io_led[0+0+2-:3] = M_adder_fail_state;
          M_multi_seven_seg_word = M_adder_fail_status;
          M_adder_fail_start = io_dip[0+0+0-:1];
          M_adder_fail_test_c = M_adder_out;
        end else begin
          a = M_adder_basic_fail_test_a;
          b = M_adder_basic_fail_test_b;
          alufn = M_adder_basic_fail_test_alufn;
          io_led[0+0+1-:2] = M_adder_basic_fail_state;
          M_multi_seven_seg_word = M_adder_basic_fail_status;
          M_adder_basic_fail_start = io_dip[0+0+0-:1];
          M_adder_basic_fail_test_c = M_adder_out;
        end
      end
    end
    M_compare_basic_pass_start = 1'h0;
    M_compare_basic_fail_start = 1'h0;
    M_compare_fail_start = 1'h0;
    M_compare_basic_pass_test_c = 1'h0;
    M_compare_basic_fail_test_c = 1'h0;
    M_compare_fail_test_c = 1'h0;
    if (io_dip[0+1+0-:1]) begin
      io_led[8+15-:16] = {M_compare_out[8+7-:8], M_compare_out[0+7-:8]};
      if (io_dip[0+6+1-:2] == 2'h0) begin
        a = M_compare_basic_pass_test_a;
        b = M_compare_basic_pass_test_b;
        alufn = M_compare_basic_pass_test_alufn;
        io_led[0+0+1-:2] = M_compare_basic_pass_state;
        M_multi_seven_seg_word = M_compare_basic_pass_status;
        M_compare_basic_pass_start = io_dip[0+1+0-:1];
        M_compare_basic_pass_test_c = M_compare_out;
      end else begin
        if (io_dip[0+6+0-:1] == 1'h1) begin
          a = M_compare_fail_test_a;
          b = M_compare_fail_test_b;
          alufn = M_compare_fail_test_alufn;
          io_led[0+0+2-:3] = M_compare_fail_state;
          M_multi_seven_seg_word = M_compare_fail_status;
          M_compare_fail_start = io_dip[0+1+0-:1];
          M_compare_fail_test_c = M_compare_out;
        end else begin
          a = M_compare_basic_fail_test_a;
          b = M_compare_basic_fail_test_b;
          alufn = M_compare_basic_fail_test_alufn;
          io_led[0+0+1-:2] = M_compare_basic_fail_state;
          M_multi_seven_seg_word = M_compare_basic_fail_status;
          M_compare_basic_fail_start = io_dip[0+1+0-:1];
          M_compare_basic_fail_test_c = M_compare_out;
        end
      end
    end
    M_boolean_basic_pass_start = 1'h0;
    M_boolean_basic_fail_start = 1'h0;
    M_boolean_fail_start = 1'h0;
    M_boolean_basic_pass_test_c = 1'h0;
    M_boolean_basic_fail_test_c = 1'h0;
    M_boolean_fail_test_c = 1'h0;
    if (io_dip[0+2+0-:1]) begin
      io_led[8+15-:16] = {M_boolean_out[8+7-:8], M_boolean_out[0+7-:8]};
      if (io_dip[0+6+1-:2] == 2'h0) begin
        a = M_boolean_basic_pass_test_a;
        b = M_boolean_basic_pass_test_b;
        alufn = M_boolean_basic_pass_test_alufn;
        io_led[0+0+1-:2] = M_boolean_basic_pass_state;
        M_multi_seven_seg_word = M_boolean_basic_pass_status;
        M_boolean_basic_pass_start = io_dip[0+2+0-:1];
        M_boolean_basic_pass_test_c = M_boolean_out;
      end else begin
        if (io_dip[0+6+0-:1] == 1'h1) begin
          a = M_boolean_fail_test_a;
          b = M_boolean_fail_test_b;
          alufn = M_boolean_fail_test_alufn;
          io_led[0+0+2-:3] = M_boolean_fail_state;
          M_multi_seven_seg_word = M_boolean_fail_status;
          M_boolean_fail_start = io_dip[0+2+0-:1];
          M_boolean_fail_test_c = M_boolean_out;
        end else begin
          a = M_boolean_basic_fail_test_a;
          b = M_boolean_basic_fail_test_b;
          alufn = M_boolean_basic_fail_test_alufn;
          io_led[0+0+1-:2] = M_boolean_basic_fail_state;
          M_multi_seven_seg_word = M_boolean_basic_fail_status;
          M_boolean_basic_fail_start = io_dip[0+2+0-:1];
          M_boolean_basic_fail_test_c = M_boolean_out;
        end
      end
    end
    M_shifter_basic_pass_start = 1'h0;
    M_shifter_basic_fail_start = 1'h0;
    M_shifter_fail_start = 1'h0;
    M_shifter_basic_pass_test_c = 1'h0;
    M_shifter_basic_fail_test_c = 1'h0;
    M_shifter_fail_test_c = 1'h0;
    if (io_dip[0+3+0-:1]) begin
      io_led[8+15-:16] = {M_shifter_out[8+7-:8], M_shifter_out[0+7-:8]};
      if (io_dip[0+6+1-:2] == 2'h0) begin
        a = M_shifter_basic_pass_test_a;
        b = M_shifter_basic_pass_test_b;
        alufn = M_shifter_basic_pass_test_alufn;
        io_led[0+0+1-:2] = M_shifter_basic_pass_state;
        M_multi_seven_seg_word = M_shifter_basic_pass_status;
        M_shifter_basic_pass_start = io_dip[0+3+0-:1];
        M_shifter_basic_pass_test_c = M_shifter_out;
      end else begin
        if (io_dip[0+6+0-:1] == 1'h1) begin
          a = M_shifter_fail_test_a;
          b = M_shifter_fail_test_b;
          alufn = M_shifter_fail_test_alufn;
          io_led[0+0+2-:3] = M_shifter_fail_state;
          M_multi_seven_seg_word = M_shifter_fail_status;
          M_shifter_fail_start = io_dip[0+3+0-:1];
          M_shifter_fail_test_c = M_shifter_out;
        end else begin
          a = M_shifter_basic_fail_test_a;
          b = M_shifter_basic_fail_test_b;
          alufn = M_shifter_basic_fail_test_alufn;
          io_led[0+0+1-:2] = M_shifter_basic_fail_state;
          M_multi_seven_seg_word = M_shifter_basic_fail_status;
          M_shifter_basic_fail_start = io_dip[0+3+0-:1];
          M_shifter_basic_fail_test_c = M_shifter_out;
        end
      end
    end
    M_alu_basic_pass_start = 1'h0;
    M_alu_basic_fail_start = 1'h0;
    M_alu_fail_start = 1'h0;
    M_alu_basic_pass_test_c = 1'h0;
    M_alu_basic_fail_test_c = 1'h0;
    M_alu_fail_test_c = 1'h0;
    if (io_dip[0+4+0-:1]) begin
      io_led[8+15-:16] = {M_alu_out[8+7-:8], M_alu_out[0+7-:8]};
      z = M_alu_z;
      v = M_alu_v;
      n = M_alu_n;
      if (io_dip[0+6+1-:2] == 2'h0) begin
        a = M_alu_basic_pass_test_a;
        b = M_alu_basic_pass_test_b;
        alufn = M_alu_basic_pass_test_alufn;
        io_led[0+0+1-:2] = M_alu_basic_pass_state;
        M_multi_seven_seg_word = M_alu_basic_pass_status;
        M_alu_basic_pass_start = io_dip[0+4+0-:1];
        M_alu_basic_pass_test_c = M_alu_out;
      end else begin
        if (io_dip[0+6+0-:1] == 1'h1) begin
          a = M_alu_fail_test_a;
          b = M_alu_fail_test_b;
          alufn = M_alu_fail_test_alufn;
          io_led[0+0+2-:3] = M_alu_fail_state;
          M_multi_seven_seg_word = M_alu_fail_status;
          M_alu_fail_start = io_dip[0+4+0-:1];
          M_alu_fail_test_c = M_alu_out;
        end else begin
          a = M_alu_basic_fail_test_a;
          b = M_alu_basic_fail_test_b;
          alufn = M_alu_basic_fail_test_alufn;
          io_led[0+0+1-:2] = M_alu_basic_fail_state;
          M_multi_seven_seg_word = M_alu_basic_fail_status;
          M_alu_basic_fail_start = io_dip[0+4+0-:1];
          M_alu_basic_fail_test_c = M_alu_out;
        end
      end
    end
    if (io_dip[0+0+4-:5] == 1'h0) begin
      a = 1'h0;
      b = 1'h0;
      alufn = 1'h0;
      io_led[8+15-:16] = 16'h0000;
      io_led[0+0+1-:2] = 2'h0;
      M_multi_seven_seg_word = 32'h2053454c;
    end
    M_adder_a = a;
    M_adder_b = b;
    M_adder_alufn = alufn;
    M_adder_fail_test_z = z;
    M_adder_fail_test_v = v;
    M_adder_fail_test_n = n;
    M_compare_z = z;
    M_compare_v = v;
    M_compare_n = n;
    M_compare_alufn = alufn;
    M_compare_fail_test_z = z;
    M_compare_fail_test_v = v;
    M_compare_fail_test_n = n;
    M_boolean_a = a;
    M_boolean_b = b;
    M_boolean_alufn = alufn;
    M_boolean_fail_test_z = z;
    M_boolean_fail_test_v = v;
    M_boolean_fail_test_n = n;
    M_shifter_a = a;
    M_shifter_b = b;
    M_shifter_alufn = alufn;
    M_shifter_fail_test_z = z;
    M_shifter_fail_test_v = v;
    M_shifter_fail_test_n = n;
    M_alu_a = a;
    M_alu_b = b;
    M_alu_alufn = alufn;
    M_alu_fail_test_z = z;
    M_alu_fail_test_v = v;
    M_alu_fail_test_n = n;
    io_led[0+7+0-:1] = z;
    io_led[0+6+0-:1] = v;
    io_led[0+5+0-:1] = n;
  end
endmodule
