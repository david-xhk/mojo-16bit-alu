/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     NUM_TEST_CASES = 20
     TEST_NAME = TestCasesROM.ALU_FAIL_NAME
     TEST_A = TestCasesROM.ALU_FAIL_A
     TEST_B = TestCasesROM.ALU_FAIL_B
     TEST_ALUFN = TestCasesROM.ALU_FAIL_ALUFN
     TEST_C = TestCasesROM.ALU_FAIL_C
     BYPASS_FAIL = 0
     NUM_TEST_SECS = 3
     NUM_FAIL_SECS = 1
     NUM_FAIL_BLINKS = 2
*/
module basic_tester_21 (
    input clk,
    input rst,
    input start,
    input [15:0] test_c,
    output reg [15:0] test_a,
    output reg [15:0] test_b,
    output reg [5:0] test_alufn,
    output reg [1:0] state,
    output reg [31:0] status
  );
  
  localparam NUM_TEST_CASES = 5'h14;
  localparam TEST_NAME = 640'h53524131534852325348523153484c3253484c3120204132584f5232204f5232204f5231414e4431204c4531204c5432204c543120455132204551314e4e554c53554232535542314144443241444431;
  localparam TEST_A = 320'h800080008000000100010101d524ffff88804789000b001f000b001f000b041affff0001ffff0001;
  localparam TEST_B = 320'h0001000f0001000f00017397ffe7200a99491a0e001f000b001f000b001f07d0ffff0001ffff0001;
  localparam TEST_ALUFN = 120'h8e186089a59e799df5d73c82041010;
  localparam TEST_C = 320'hc001000140008000000201002ac3ffff99c90208000000000001000000000b2100000000fffe0002;
  localparam BYPASS_FAIL = 1'h0;
  localparam NUM_TEST_SECS = 2'h3;
  localparam NUM_FAIL_SECS = 1'h1;
  localparam NUM_FAIL_BLINKS = 2'h2;
  
  
  localparam NUM_TEST_TIMER_CYCLES = 28'h8f0d180;
  
  localparam NUM_FAIL_TIMER_CYCLES = 26'h2faf080;
  
  reg [31:0] next_status;
  
  reg [27:0] M_display_test_timer_d, M_display_test_timer_q = 1'h0;
  reg [25:0] M_display_fail_timer_d, M_display_fail_timer_q = 1'h0;
  reg [1:0] M_fail_blink_ctr_d, M_fail_blink_ctr_q = 1'h0;
  reg [4:0] M_tester_ctr_d, M_tester_ctr_q = 1'h0;
  localparam IDLE_tester_state = 2'd0;
  localparam TEST_tester_state = 2'd1;
  localparam FAIL_tester_state = 2'd2;
  localparam DONE_tester_state = 2'd3;
  
  reg [1:0] M_tester_state_d, M_tester_state_q = IDLE_tester_state;
  
  always @* begin
    M_tester_state_d = M_tester_state_q;
    M_display_fail_timer_d = M_display_fail_timer_q;
    M_display_test_timer_d = M_display_test_timer_q;
    M_fail_blink_ctr_d = M_fail_blink_ctr_q;
    M_tester_ctr_d = M_tester_ctr_q;
    
    status = 32'h00000000;
    test_a = 1'h0;
    test_b = 1'h0;
    test_alufn = 1'h0;
    if (!start) begin
      M_tester_state_d = IDLE_tester_state;
    end
    state = M_tester_state_q;
    next_status = 32'h4e554c4c;
    
    case (M_tester_state_q)
      IDLE_tester_state: begin
        M_display_test_timer_d = 1'h0;
        M_display_fail_timer_d = 1'h0;
        M_tester_ctr_d = 1'h0;
        next_status = 32'h49444c45;
        if (start) begin
          M_tester_state_d = TEST_tester_state;
        end
      end
      TEST_tester_state: begin
        next_status = TEST_NAME[(M_tester_ctr_q)*32+31-:32];
        test_a = TEST_A[(M_tester_ctr_q)*16+15-:16];
        test_b = TEST_B[(M_tester_ctr_q)*16+15-:16];
        test_alufn = TEST_ALUFN[(M_tester_ctr_q)*6+5-:6];
        if (M_display_test_timer_q < 28'h8f0d180) begin
          M_display_test_timer_d = M_display_test_timer_q + 1'h1;
        end else begin
          M_display_test_timer_d = 1'h0;
          if (test_c != TEST_C[(M_tester_ctr_q)*16+15-:16]) begin
            M_tester_state_d = FAIL_tester_state;
          end else begin
            if (M_tester_ctr_q == 6'h13) begin
              M_tester_state_d = DONE_tester_state;
              M_tester_ctr_d = 1'h0;
            end else begin
              M_tester_ctr_d = M_tester_ctr_q + 1'h1;
            end
          end
        end
      end
      FAIL_tester_state: begin
        next_status = 32'h4641494c;
      end
      DONE_tester_state: begin
        next_status = 32'h444f4e45;
      end
    endcase
    if (M_tester_state_q == IDLE_tester_state | M_tester_state_q == TEST_tester_state | M_tester_state_q == DONE_tester_state) begin
      status = next_status;
    end else begin
      if (~M_fail_blink_ctr_q[0+0-:1]) begin
        status = next_status;
      end else begin
        status = TEST_NAME[(M_tester_ctr_q)*32+31-:32];
      end
      if (M_display_fail_timer_q < 26'h2faf080) begin
        M_display_fail_timer_d = M_display_fail_timer_q + 1'h1;
      end else begin
        M_display_fail_timer_d = 1'h0;
        if (1'h1) begin
          M_fail_blink_ctr_d = M_fail_blink_ctr_q + 1'h1;
        end else begin
          if (M_fail_blink_ctr_q < 5'h03) begin
            M_fail_blink_ctr_d = M_fail_blink_ctr_q + 1'h1;
          end else begin
            M_fail_blink_ctr_d = 1'h0;
            if (M_tester_ctr_q < 6'h13) begin
              M_tester_state_d = TEST_tester_state;
              M_tester_ctr_d = M_tester_ctr_q + 1'h1;
            end else begin
              M_tester_state_d = DONE_tester_state;
              M_tester_ctr_d = 1'h0;
            end
          end
        end
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_display_test_timer_q <= 1'h0;
      M_display_fail_timer_q <= 1'h0;
      M_fail_blink_ctr_q <= 1'h0;
      M_tester_ctr_q <= 1'h0;
      M_tester_state_q <= 1'h0;
    end else begin
      M_display_test_timer_q <= M_display_test_timer_d;
      M_display_fail_timer_q <= M_display_fail_timer_d;
      M_fail_blink_ctr_q <= M_fail_blink_ctr_d;
      M_tester_ctr_q <= M_tester_ctr_d;
      M_tester_state_q <= M_tester_state_d;
    end
  end
  
endmodule
