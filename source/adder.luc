module adder (
    signed input a[16],     // 16-bit signed input for A
    signed input b[16],     // 16-bit signed input for B
    input alufn[6],         // 6-bit input for ALUFN opcode
    signed output out[16],  // 16-bit signed output from adder unit
    output z,               // 1-bit output for zero condition
    output v,               // 1-bit output for overflow condition
    output n                // 1-bit output for indicating MSB of output
  ) {
  
  sig s[16];  // signal to allow read/write on 16-bit sum (S)
  sig xb15;   // signal to allow read/write on MSB of B

  always {
    if (alufn[0] == 1)       // if ALUFN[0] = 1, do SUB (subtraction)
      s = a - b;
    else if (alufn[1] == 0)  // if ALUFN[1:0] = 00, do ADD (addition)
      s = a + b;
    else                     // if ALUFN[1:0] = 10, do MUL (multiplication)
      s = a * b;
    
    out = s;                                         // connect the 16-bit output from adder unit to S 
    xb15 = alufn[0] ^ b[15];                         // compute 2's complement of the MSB of B by using the formula XB15 = ALUFN[0] XOR B[15]
    z = ~|s;                                         // find 1-bit output for zero condition Z by applying reduction operator NOR to S
    v = (a[15]&xb15&~s[15]) | (~a[15]&~xb15&s[15]);  // compute 1-bit output for overflow condition V by using the formula V = (XA15 AND XB15 AND ~S15) OR (~XA15 AND XB15 AND S15)
    n = s[15];                                       // connect 1-bit output for indicating MSB of output N to the MSB of S
  } 
}
