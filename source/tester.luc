module tester #(        // for detailed comments refer to basic_tester.luc
    NUM_TEST_CASES         = 1            : NUM_TEST_CASES > 0,
    TEST_NAME              = {"NULL"}     : (TEST_NAME.WIDTH[0] > 0) & (TEST_NAME[0].WIDTH[0] == 4),
    TEST_A                 = {16b0}       : (TEST_A.WIDTH[0] > 0) & (TEST_A[0].WIDTH == 16),
    TEST_B                 = {16b0}       : (TEST_B.WIDTH[0] > 0) & (TEST_B[0].WIDTH == 16),
    TEST_ALUFN             = {6b0}        : (TEST_ALUFN.WIDTH[0] > 0) & (TEST_ALUFN[0].WIDTH == 6),
    TEST_C                 = {16b0}       : (TEST_C.WIDTH[0] > 0) & (TEST_C[0].WIDTH == 16),                // 16-bit values for the expected C output of the test cases 
    TEST_Z                 = {1b0}        : (TEST_Z.WIDTH[0] > 0) & (TEST_Z[0].WIDTH == 1),                 // 1-bit values for the expected Z output of the test cases
    TEST_V                 = {1b0}        : (TEST_V.WIDTH[0] > 0) & (TEST_V[0].WIDTH == 1),                 // 1-bit values for the expected V output of the test cases
    TEST_N                 = {1b0}        : (TEST_N.WIDTH[0] > 0) & (TEST_N[0].WIDTH == 1),                 // 1-bit values for the expected N output of the test cases
    INVALID_ALUFN          = {6b0}        : (INVALID_ALUFN.WIDTH[0] > 0) & (INVALID_ALUFN[0].WIDTH == 6),   // 6-bit values for INVALID ALUFN signals to the module being tested
    BYPASS_FAIL            = 0            : (BYPASS_FAIL == 0) | (BYPASS_FAIL == 1),
    NUM_TEST_SECS          = 2            : NUM_TEST_SECS > 0,
    NUM_FAIL_SECS          = 1            : NUM_FAIL_SECS > 0,
    NUM_FAIL_BLINKS        = 2            : NUM_FAIL_BLINKS > 0
  )( 
    input clk,
    input rst,
    input start,
    input test_c[16],
    input test_z,              // 1-bit Z input from the module being tested
    input test_v,              // 1-bit V input from the module being tested
    input test_n,              // 1-bit N input from the module being tested
    output test_a[16],
    output test_b[16],
    output test_alufn[6],
    output state[3],           // the number of fail states have increased, so now 3 state bits are needed to reflect the internal state
    output status[4][8]
  ) {  
  
  const NUM_TEST_TIMER_CYCLES = NUM_TEST_SECS*50*$pow(10,6);
  
  const NUM_FAIL_TIMER_CYCLES = NUM_FAIL_SECS*50*$pow(10,6);

  sig next_status[4][8];
  
  var i;                       // variable which will be used later on in a for loop to check for invalid ALUFN inputs
  
  var failed;                  // variable which will be used later on in a series of tests on the outputs of the module being tested to check if any of the tests failed

  .clk(clk), .rst(rst) {
    dff display_test_timer[$clog2(NUM_TEST_TIMER_CYCLES)](#INIT(0));
    dff display_fail_timer[$clog2(NUM_FAIL_TIMER_CYCLES)](#INIT(0));
    dff fail_blink_ctr[$clog2(NUM_FAIL_BLINKS)+1](#INIT(0));
    dff tester_ctr[$clog2(NUM_TEST_CASES)](#INIT(0));
    fsm tester_state = {IDLE, TEST, FAIL_C, FAIL_Z, FAIL_V, FAIL_N, FAIL_ALUFN, DONE};      // there are now 5 fail states for 5 different kind of errors to give more detail
  }
  
  always {
    status = 4x{{8h00}};
    test_a = 0;
    test_b = 0;
    test_alufn = 0;
    if (!start)
      tester_state.d = tester_state.IDLE;
    
    state = tester_state.q;
    next_status = "NULL";
    
    case (tester_state.q) {
      tester_state.IDLE:
        display_test_timer.d = 0;
        display_fail_timer.d = 0;
        tester_ctr.d = 0;
        
        next_status = "IDLE";
        
        if (start)
          tester_state.d = tester_state.TEST;
      
      tester_state.TEST:
        next_status = TEST_NAME[tester_ctr.q];
        test_a = TEST_A[tester_ctr.q];
        test_b = TEST_B[tester_ctr.q];
        test_alufn = TEST_ALUFN[tester_ctr.q];
        
        if (display_test_timer.q < NUM_TEST_TIMER_CYCLES)
          display_test_timer.d = display_test_timer.q + 1;
        
        else {
          display_test_timer.d = 0;
          failed = 0;                                        // initialise variable failed to 0, which will be used to track if a test was failed
          
          if (test_c != TEST_C[tester_ctr.q]) {              // test if the output from the module being tested matches the expected output from the test case
            failed = 1;
            tester_state.d = tester_state.FAIL_C;
          }
          
          else if (test_z != TEST_Z[tester_ctr.q]) {         // test if the Z calculated from the adder matches the expected Z from the test case (for use in adder/ALU)
            failed = 1;
            tester_state.d = tester_state.FAIL_Z;
          }
          
          else if (test_v != TEST_V[tester_ctr.q]) {         // test if the V calculated from the adder matches the expected Z from the test case (for use in adder/ALU)
            failed = 1;
            tester_state.d = tester_state.FAIL_V;
          }
            
          else if (test_n != TEST_N[tester_ctr.q]) {         // test if the N calculated from the adder matches the expected Z from the test case (for use in adder/ALU)
            failed = 1;
            tester_state.d = tester_state.FAIL_N;
          }
            
          for (i = 0; i < INVALID_ALUFN.WIDTH[0]; i++) {     // test if the ALUFN input to the module being tested was invalid specifically to it
            if (TEST_ALUFN[tester_ctr.q] == INVALID_ALUFN[i]) {
              failed = 1;
              tester_state.d = tester_state.FAIL_ALUFN;
            }
          }   

          if (failed)
            failed = 0;                                      // if failed is true, a test case failed and we know the next state is one of the fail states
            
          else if (tester_ctr.q == NUM_TEST_CASES-1) {       // otherwise, we can increment the test case index as per usual to move on to the next test case
            tester_state.d = tester_state.DONE;
            tester_ctr.d = 0;
          }
            
          else
            tester_ctr.d = tester_ctr.q + 1;
        }
        
      tester_state.FAIL_C:                                   // the different errors for the different fail states
        next_status = "ERR1";

      tester_state.FAIL_Z:
        next_status = "ERR2";
      
      tester_state.FAIL_V:
        next_status = "ERR3";
      
      tester_state.FAIL_N:
        next_status = "ERR4";
      
      tester_state.FAIL_ALUFN:
        next_status = "ERR5";

      tester_state.DONE:
        next_status = "DONE";
    }
    
    if (tester_state.q == tester_state.IDLE | 
        tester_state.q == tester_state.TEST | 
        tester_state.q == tester_state.DONE)
      status = next_status;
      
    else {
      if (~fail_blink_ctr.q[0])
        status = next_status;

      else
        status = TEST_NAME[tester_ctr.q];
      
      if (display_fail_timer.q < NUM_FAIL_TIMER_CYCLES)
	      display_fail_timer.d = display_fail_timer.q + 1;

      else {
        display_fail_timer.d = 0;
              
        if (~BYPASS_FAIL)
          fail_blink_ctr.d = fail_blink_ctr.q + 1;
        
        else if (fail_blink_ctr.q < 2*NUM_FAIL_BLINKS-1)
          fail_blink_ctr.d = fail_blink_ctr.q + 1;
        
        else {
          fail_blink_ctr.d = 0;

          if (tester_ctr.q < NUM_TEST_CASES-1) {
            tester_state.d = tester_state.TEST;
            tester_ctr.d = tester_ctr.q + 1;
          }
            
          else {
            tester_state.d = tester_state.DONE;
            tester_ctr.d = 0;
          }
        }
      }
    }
  }
}
